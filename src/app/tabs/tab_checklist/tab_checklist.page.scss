// src/app/tabs/tab_checklist/tab_checklist.page.scss
ion-header {
  ion-toolbar {
    --background: var(--primary-gradient); // Applied globally in global.scss, ensure it's consistent
    color: var(--ion-color-primary-contrast); // White text on gradient

    ion-button { // Ensure header buttons are visible
      color: var(--ion-color-primary-contrast);
    }
  }

  ion-toolbar:not(:first-of-type) { // Toolbars for search, segment
    --background: var(--ion-toolbar-background); // Solid color for these toolbars
     background: var(--ion-toolbar-background);
    
    @media (prefers-color-scheme: light){
      --background: #f9f9f9; // A slightly off-white for light mode
      background: #f9f9f9;
    }
     @media (prefers-color-scheme: dark){
      --background: var(--ion-color-step-100);
      background: var(--ion-color-step-100);
    }
  }

  ion-searchbar {
    --background: var(--ion-item-background); // Match item backgrounds
    --color: var(--ion-text-color);
    --placeholder-color: var(--ion-color-medium);
    --icon-color: var(--ion-color-medium);
    --clear-button-color: var(--ion-color-medium);
    border-radius: 8px;
    margin: 8px; // Consistent margin
    padding: 0 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);

     @media (prefers-color-scheme: dark) {
      --background: var(--ion-color-step-150);
      box-shadow: none;
    }
  }

  ion-segment {
    ion-segment-button {
      --color-checked: var(--ion-color-primary);
      --indicator-color: var(--ion-color-primary);
      --color: var(--ion-color-medium);
      font-weight: 500;

      &.segment-button-checked {
        font-weight: 600;
      }
       @media (prefers-color-scheme: dark) {
        --color-checked: var(--ion-color-primary-tint);
        --indicator-color: var(--ion-color-primary-tint);
        --color: var(--ion-color-step-850);
      }
    }
  }
}

.checklist-content {
  --padding-bottom: 70px; // Space for FAB and footer
}

ion-list-header.stage-list-header {
  --background: var(--ion-background-color);
  border-bottom: 1px solid var(--ion-border-color);
  padding-bottom: 4px; // Reduce padding
  padding-top: 12px; // Increase top padding for breathing room

  ion-label {
    font-size: 1rem;
    font-weight: 600;
    color: var(--ion-text-color);
  }
}

.sort-buttons-container {
    display: flex;
    gap: 0px; // Minimal gap
    ion-button {
        --padding-start: 6px;
        --padding-end: 6px;
        font-size: 0.8rem;
        text-transform: none;
        color: var(--ion-color-medium);
        &.active-sort {
            color: var(--ion-color-primary);
            font-weight: bold;
        }
         @media (prefers-color-scheme: dark) {
            color: var(--ion-color-step-850);
             &.active-sort {
                color: var(--ion-color-primary-tint);
            }
        }
    }
}


ion-item.category-item {
  --inner-border-width: 0 0 1px 0;
  --border-color: var(--ion-border-color);
  --padding-start: 16px;
  --padding-end: 16px;
  --min-height: 50px; // Slightly reduced category item height
  transition: background-color 0.2s ease-in-out;
  --background: var(--ion-item-background);

  ion-label h2 {
    font-size: 1.05rem; // Slightly larger category titles
    font-weight: 600; // Bold category titles
    margin: 0;
    padding: 10px 0; // Vertical padding for label
    display: flex;
    align-items: center;
    color: var(--ion-text-color);
  }

  .task-count {
    font-size: 0.85rem;
    font-weight: normal;
    color: var(--ion-color-medium);
    margin-left: 8px;
  }

  &:hover {
    --background: var(--ion-color-primary-tint-lighter, rgba(var(--ion-color-primary-rgb), 0.05));
  }

  &.expanded {
    --background: var(--ion-color-primary-tint-lightest, rgba(var(--ion-color-primary-rgb), 0.08));
    ion-label h2 {
        color: var(--ion-color-primary);
         @media (prefers-color-scheme: dark) {
             color: var(--ion-color-primary-tint);
        }
    }
  }

  .category-complete-icon {
    margin-left: 8px;
    font-size: 1.2em;
  }
   @media (prefers-color-scheme: dark) {
    --border-color: var(--ion-color-step-200);
    --background: var(--ion-color-step-100);
     &:hover {
        --background: rgba(var(--ion-color-primary-rgb), 0.15);
     }
     &.expanded {
        --background: rgba(var(--ion-color-primary-rgb), 0.2);
     }
  }
}

.task-items-container {
    background-color: var(--ion-item-background-tint, rgba(0,0,0,0.02)); // Slightly different background for task items within category
     @media (prefers-color-scheme: dark) {
       background-color: rgba(var(--ion-color-light-rgb), 0.03);
    }
}

ion-item.task-item {
  --inner-border-width: 0; // Remove inner border for tasks, rely on container
  --padding-start: 16px; // Align with category item
  --padding-end: 8px; // Less padding on the end to accommodate action button
  --min-height: auto; // Auto height based on content
  align-items: flex-start; // Align checkbox with top of text
  padding-top: 12px; // Increased padding
  padding-bottom: 12px;
  cursor: default; // Default cursor as click opens modal
  --background: transparent; // Inherit from .task-items-container

  &.is-favorite {
    // Subtle favorite indication, star icon is primary
    --background: var(--ion-color-warning-tint-lightest, rgba(var(--ion-color-warning-rgb), 0.05));
    border-left: 3px solid var(--ion-color-warning);
    padding-left: calc(16px - 3px);
     @media (prefers-color-scheme: dark) {
       --background: rgba(var(--ion-color-warning-rgb), 0.1);
       border-left-color: var(--ion-color-warning-shade);
    }
  }

  &.high-priority-incomplete:not(.is-favorite) { // Avoid double background if also favorite
    border-right: 3px solid var(--ion-color-danger);
    padding-right: calc(8px - 3px);
    // --background: rgba(var(--ion-color-danger-rgb), 0.03);
     @media (prefers-color-scheme: dark) {
       border-right-color: var(--ion-color-danger-shade);
    }
  }
}

.task-checkbox {
    margin-right: 12px; // Space between checkbox and label
    margin-top: 2px; // Align with first line of text better
}

.task-label {
  flex: 1;
  h3 { // Task Description
    font-size: 0.95rem;
    font-weight: 500;
    margin: 0 0 6px 0;
    display: flex; // For star alignment
    align-items: center;
    color: var(--ion-text-color);
    &.checked { // Strikethrough is good
      color: var(--ion-color-medium);
      text-decoration: line-through;
    }
  }
  .favorite-star-inline {
    margin-right: 6px;
    font-size: 1.1em; // Slightly larger star
    vertical-align: text-bottom;
  }
}

.task-meta {
  font-size: 0.8rem;
  color: var(--ion-color-medium);
  margin: 0 0 4px 0;
  display: flex;
  flex-wrap: wrap; // Allow wrapping if space is tight
  gap: 4px 12px; // Row and column gap
  align-items: center;
   .due-date-indicator {
    // ... existing styles ...
    .relative-due-date {
      margin-left: 5px; // Add some space
      font-style: italic;
      // color: var(--ion-color-medium-shade); // Optional: different color
    }
  }
}

.priority-indicator, .due-date-indicator {
    display: inline-flex;
    align-items: center;
    padding: 2px 6px;
    border-radius: 4px;
    // background-color: rgba(var(--ion-color-medium-rgb), 0.1);
}
.priority-icon, .due-date-icon {
    margin-right: 4px;
    font-size: 0.9em;
}

.priority-indicator.high-priority { color: var(--ion-color-danger); /* background-color: rgba(var(--ion-color-danger-rgb),0.1); */}
.priority-indicator.medium-priority { color: var(--ion-color-warning); /* background-color: rgba(var(--ion-color-warning-rgb),0.1); */}
.priority-indicator.low-priority { color: var(--ion-color-success); /* background-color: rgba(var(--ion-color-success-rgb),0.1); */}

.task-notes-preview {
    font-size: 0.75rem;
    color: var(--ion-color-medium-shade);
    margin-top: 4px;
    font-style: italic;
    display: flex;
    align-items: center;
    ion-icon {
        margin-right: 4px;
        font-size: 0.9em;
    }
}

.task-actions-end {
    ion-button.info-button {
        --padding-start: 4px;
        --padding-end: 4px;
        height: 30px; // Smaller touch target, ensure it's still accessible
        width: 30px;
        font-size: 1.2rem; // Icon size
    }
}


.empty-list-message {
  color: var(--ion-color-medium);
  font-style: normal; // Not italic
  margin-top: 40px; // More margin
  text-align: center;

  ion-icon {
    font-size: 56px; // Larger icon
    margin-bottom: 16px;
  }
  p {
    font-size: 1.1rem;
    margin-bottom: 16px;
  }
  ion-button { // Style the reset button
    margin-top: 8px;
  }
}


ion-footer ion-toolbar .overall-progress-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
  width: 100%; // Ensure it takes full width

  ion-label {
    font-size: 0.9em;
    color: var(--ion-text-color);
  }
   ion-progress-bar {
    height: 6px; // Slightly thicker progress bar
    border-radius: 3px;
  }
   @media (prefers-color-scheme: dark) {
     ion-label {
        color: var(--ion-color-primary-contrast);
     }
  }
}

// Ensure dark mode styles for task items are distinct
@media (prefers-color-scheme: dark) {
  ion-item.category-item {
    --border-color: var(--ion-color-step-200);
    ion-label h2 {
      color: var(--ion-text-color);
    }
    &.expanded ion-label h2 {
      color: var(--ion-color-primary-tint);
    }
  }

  .task-items-container {
    background-color: rgba(var(--ion-color-light-rgb), 0.05);
  }
  
  ion-item.task-item {
    &.is-favorite {
      border-left-color: var(--ion-color-warning-shade);
    }
    &.high-priority-incomplete:not(.is-favorite) {
      border-right-color: var(--ion-color-danger-shade);
    }
  }
  .task-label h3 {
    color: var(--ion-text-color);
    &.checked {
      color: var(--ion-color-medium);
    }
  }
  .task-meta {
    color: var(--ion-color-step-850);
  }
  .priority-indicator, .due-date-indicator {
    // background-color: rgba(var(--ion-color-step-850-rgb), 0.15);
  }
}